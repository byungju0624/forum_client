[{"/home/jihyun/codestates/project/forum_client/forum_project/src/firebase.js":"1","/home/jihyun/codestates/project/forum_client/forum_project/src/component/MyPage/WishList.js":"2","/home/jihyun/codestates/project/forum_client/forum_project/src/component/Guide/Guide.js":"3","/home/jihyun/codestates/project/forum_client/forum_project/src/component/Regist/Regist.js":"4","/home/jihyun/codestates/project/forum_client/forum_project/src/component/MainPage/FirstBlock.js":"5","/home/jihyun/codestates/project/forum_client/forum_project/src/component/Menu.js":"6","/home/jihyun/codestates/project/forum_client/forum_project/src/component/MainPage/MainPage.js":"7","/home/jihyun/codestates/project/forum_client/forum_project/src/component/MyPage/RegistStatus.js":"8"},{"size":677,"mtime":1610693311856,"results":"9","hashOfConfig":"10"},{"size":615,"mtime":1611216525865,"results":"11","hashOfConfig":"10"},{"size":788,"mtime":1611108384144,"results":"12","hashOfConfig":"10"},{"size":8419,"mtime":1611216262328,"results":"13","hashOfConfig":"10"},{"size":1713,"mtime":1610675319549,"results":"14","hashOfConfig":"10"},{"size":5719,"mtime":1611216367628,"results":"15","hashOfConfig":"10"},{"size":233,"mtime":1611216262324,"results":"16","hashOfConfig":"10"},{"size":1602,"mtime":1611216327780,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b813wj",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jihyun/codestates/project/forum_client/forum_project/src/firebase.js",[],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/MyPage/WishList.js",[],["36","37"],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/Guide/Guide.js",[],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/Regist/Regist.js",["38","39","40","41"],"import styles from \"../../css/Regist/Regist.module.css\";\nimport { useState, useRef, useCallback } from \"react\";\nimport { firestore } from \"../../firebase\";\nimport { storage } from \"../../firebase\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Regist() {\n  const [comment, setComment] = useState(\"\");\n  const [finish, setFinish] = useState(false);\n  const [host, setHost] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [party, setParty] = useState(0);\n  const [signed, setSigned] = useState(0);\n  const [skill, setSkilled] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const history = useHistory();\n\n  //하나의 기술 문자열을 담기 위한 샅애\n  const [eachSkill, setEachSkill] = useState(\"\");\n\n  //이미지를 업로드 하기 위한 상태들\n  let allInputs = { imgUrl: \"\" };\n  const [imageAsFile, setImageAsFile] = useState(\"\");\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      //console.log(user.displayName);\n      //console.log(user.email);\n      setHost(user.email);\n    } else {\n      console.log(\"유저 없는 뎁쇼\");\n    }\n  });\n\n  function delay(ms) {\n    return new Promise((resolve, reject) => {\n      //promise 객체 반환, async도 promise를 다루는 기술이란 것을 잊지 말것\n      setTimeout(resolve, ms);\n    });\n  }\n\n  let createDatabase = async () => {\n    let result = await handleFireBaseUpload(); //여기서 일단 이미지를 올린다.\n    await delay(2500);\n    if (result === false) {\n      //2차 안전장치\n      console.log(\"이미지를 올리지 않아서 아무 일도 안생길 거임\");\n    } else if (!comment || finish || !name || !party || !eachSkill) {\n      alert(\"모든 항목은 필수입니다\");\n      window.location.reload();\n    } else {\n      firestore\n        .collection(\"project\")\n        .doc(name)\n        .get()\n        .then(function (docName) {\n          if (docName.data() !== undefined) {\n            alert(\"중복된 프로젝트명입니다. 다른 프로젝트 이름을 정해주세요\");\n            window.location.reload();\n          } else if (name + \".png\" !== imageAsFile.name) {\n            alert(\"프로젝트 이름과 이미지 파일은 이름이 같아야 합니다.\");\n            window.location.reload();\n          } else {\n            firestore\n              .collection(\"project\")\n              .doc(name)\n              .set({\n                host: host,\n                comment: comment,\n                finish: finish,\n                name: name,\n                party: party,\n                signed: signed,\n                skill: skill,\n                term: term,\n                image: imageAsFile.name,\n              })\n              .then(function () {\n                alert(\"프로젝트 등록에 성공했습니다\");\n                window.location.reload();\n              })\n              .catch(function (error) {\n                console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n              });\n          }\n        });\n    }\n  };\n\n  let skillbutton = () => {\n    if (skill.length > 2) {\n      alert(\"기술 스택은 3개까지만 넣을 수 있어용~\");\n    } else {\n      if (skill.includes(eachSkill.toLowerCase()) === false) {\n        setSkilled(skill.concat(eachSkill.toLowerCase()));\n      } else {\n        alert(\"중복된 기술이에용~\");\n      }\n    }\n  };\n\n  let handleImageAsFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    const image = e.target.files[0];\n    reader.onloadend = () => {\n      setImageAsFile(image);\n      setImageAsUrl(reader.result);\n    };\n    reader.readAsDataURL(image);\n  };\n\n  let handleFireBaseUpload = (e) => {\n    if (imageAsFile === \"\") {\n      alert(`이미지 파일을 올려 주세요!!!`);\n      return false;\n    } else {\n      console.log(\"이미지 업로드를 시작합니다\");\n      console.log(\"사진이름이 뭔지 확인해볼거야\" + imageAsFile.name);\n      const uploadTask = storage\n        .ref(`/project/${imageAsFile.name}`)\n        .put(imageAsFile);\n      uploadTask.on(\n        \"state_changed\",\n        (snapShot) => {\n          console.log(snapShot);\n        },\n        (err) => {\n          console.log(err);\n        },\n        () => {\n          storage\n            .ref(\"project\")\n            .child(imageAsFile.name)\n            .getDownloadURL()\n            .then((fireBaseUrl) => {\n              setImageAsUrl((prevObject) => ({\n                ...prevObject,\n                imgUrl: fireBaseUrl,\n              }));\n              console.log(\"유알엘이 뭔지 확인해볼거야\" + fireBaseUrl);\n              console.log(\"사진이름이 뭔지 확인해볼거야\" + imageAsFile.name);\n              firestore\n                .collection(\"project\")\n                .doc(imageAsFile.name)\n                .update({\n                  image: fireBaseUrl,\n                })\n                .then(function () {\n                  console.log(\n                    \"파이어베이스 업데이트 완료 이미지 url 파이어스토어에 업로드\"\n                  );\n                })\n                .catch(function (err) {\n                  //alert(err)\n                });\n            });\n        }\n      );\n      return true;\n    }\n  };\n\n  return (\n    <div className={styles.regist}>\n      <div className={styles.projectint}>\n        <span>\n          <p>\n            프로젝트 이름 :{\" \"}\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></input>\n          </p>\n          <div>\n            <form onSubmit={handleFireBaseUpload}>\n              <input\n                type=\"file\"\n                accept=\"image/png\"\n                onChange={handleImageAsFile}\n              />\n            </form>\n          </div>\n          <div style={{ marginTop: \"10px\" }}>\n            {imageAsFile !== \"\" ? (\n              <img src={imageAsUrl} style={{ width: \"50%\" }} />\n            ) : (\n              <span>\n                png 파일을 선택해주세요. <br />\n                파일의 이름은 프로젝트의 이름과 동일해야 합니다.\n              </span>\n            )}\n          </div>\n        </span>\n        <span>\n          <p>\n            모집인원 :{\" \"}\n            <input\n              type=\"number\"\n              value={party}\n              onChange={(e) => setParty(e.target.value)}\n            ></input>\n          </p>\n          <p>\n            현재 등록 인원 :{\" \"}\n            <input\n              type=\"number\"\n              value={signed}\n              onChange={(e) => setSigned(e.target.value)}\n            ></input>\n          </p>\n          <p>\n            프로젝트 기간 :{\" \"}\n            <input\n              type=\"date\"\n              value={term}\n              onChange={(e) => setTerm(e.target.value)}\n            ></input>\n          </p>\n\n          <div>\n            기술 스택 :{\" \"}\n            <input\n              type=\"text\"\n              value={eachSkill}\n              onChange={(e) => setEachSkill(e.target.value)}\n            ></input>\n            <button onClick={skillbutton}>클릭</button>\n            <div className={styles.teckstack}>\n              <li>\n                기술스택1 : <div style={{ width: \"50%\" }}>{skill[0]}</div>\n              </li>\n              <li>\n                기술스택2 : <div style={{ width: \"50%\" }}>{skill[1]}</div>\n              </li>\n              <li>\n                기술스택3 : <div style={{ width: \"50%\" }}>{skill[2]}</div>\n              </li>\n            </div>\n          </div>\n        </span>\n      </div>\n\n      <p>\n        프로젝트 개요 :{\" \"}\n        <div style={{ paddingTop: \"20px\" }}>\n          <textarea\n            type=\"text\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            style={{ width: \"50vh\", height: \"15vh\" }}\n          ></textarea>\n        </div>\n      </p>\n      <div className={styles.registbtn}>\n        <span>\n          <button onClick={createDatabase}>등록하기</button>\n        </span>\n        <span style={{ paddingLeft: \"20px\" }}>\n          <button onClick={() => history.push(\"/\")}>취소</button>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Regist;","/home/jihyun/codestates/project/forum_client/forum_project/src/component/MainPage/FirstBlock.js",[],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/Menu.js",["42","43","44","45","46","47","48","49","50","51","52","53"],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/MainPage/MainPage.js",[],"/home/jihyun/codestates/project/forum_client/forum_project/src/component/MyPage/RegistStatus.js",["54","55","56","57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":2,"column":20,"nodeType":"65","messageId":"66","endLine":2,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":2,"column":28,"nodeType":"65","messageId":"66","endLine":2,"endColumn":39},{"ruleId":"63","severity":1,"message":"68","line":11,"column":18,"nodeType":"65","messageId":"66","endLine":11,"endColumn":27},{"ruleId":"69","severity":1,"message":"70","line":190,"column":15,"nodeType":"71","endLine":190,"endColumn":64},{"ruleId":"63","severity":1,"message":"72","line":1,"column":10,"nodeType":"65","messageId":"66","endLine":1,"endColumn":20},{"ruleId":"63","severity":1,"message":"73","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":13},{"ruleId":"63","severity":1,"message":"74","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":16},{"ruleId":"63","severity":1,"message":"75","line":14,"column":8,"nodeType":"65","messageId":"66","endLine":14,"endColumn":12},{"ruleId":"63","severity":1,"message":"76","line":20,"column":11,"nodeType":"65","messageId":"66","endLine":20,"endColumn":16},{"ruleId":"63","severity":1,"message":"77","line":26,"column":7,"nodeType":"65","messageId":"66","endLine":26,"endColumn":15},{"ruleId":"63","severity":1,"message":"78","line":45,"column":21,"nodeType":"65","messageId":"66","endLine":45,"endColumn":30},{"ruleId":"63","severity":1,"message":"79","line":46,"column":21,"nodeType":"65","messageId":"66","endLine":46,"endColumn":33},{"ruleId":"63","severity":1,"message":"80","line":47,"column":21,"nodeType":"65","messageId":"66","endLine":47,"endColumn":26},{"ruleId":"63","severity":1,"message":"81","line":48,"column":21,"nodeType":"65","messageId":"66","endLine":48,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":164,"column":13,"nodeType":"71","endLine":168,"endColumn":14},{"ruleId":"69","severity":1,"message":"70","line":171,"column":15,"nodeType":"71","endLine":175,"endColumn":16},{"ruleId":"63","severity":1,"message":"82","line":18,"column":5,"nodeType":"65","messageId":"66","endLine":18,"endColumn":9},{"ruleId":"63","severity":1,"message":"83","line":20,"column":5,"nodeType":"65","messageId":"66","endLine":20,"endColumn":13},{"ruleId":"63","severity":1,"message":"84","line":21,"column":5,"nodeType":"65","messageId":"66","endLine":21,"endColumn":18},{"ruleId":"63","severity":1,"message":"85","line":22,"column":5,"nodeType":"65","messageId":"66","endLine":22,"endColumn":8},{"ruleId":"69","severity":1,"message":"70","line":43,"column":17,"nodeType":"71","endLine":43,"endColumn":66},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'setFinish' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","'login' is defined but never used.","'selected' is defined but never used.","'auth' is defined but never used.","'delay' is defined but never used.","'provider' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","'name' is assigned a value but never used.","'photoUrl' is assigned a value but never used.","'emailVerified' is assigned a value but never used.","'uid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]