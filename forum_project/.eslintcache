[{"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Regist/Regist.js":"1","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectList.js":"2","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectListDetail.js":"3","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/RegistStatus.js":"4","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/firebase.js":"5","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/Profile.js":"6","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/Project.js":"7"},{"size":10046,"mtime":1611561082168,"results":"8","hashOfConfig":"9"},{"size":4954,"mtime":1611560999197,"results":"10","hashOfConfig":"9"},{"size":6936,"mtime":1611561028271,"results":"11","hashOfConfig":"9"},{"size":2461,"mtime":1611561037791,"results":"12","hashOfConfig":"9"},{"size":858,"mtime":1610675364596,"results":"13","hashOfConfig":"9"},{"size":993,"mtime":1611537714905,"results":"14","hashOfConfig":"9"},{"size":2742,"mtime":1611623677789,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"26wkim",{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Regist/Regist.js",["32","33","34","35"],"import styles from \"../../css/Regist/Regist.module.css\";\nimport { useState, useRef, useCallback } from \"react\";\nimport { firestore } from \"../../firebase\";\nimport { storage } from \"../../firebase\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Regist() {\n  const [comment, setComment] = useState(\"\");\n  const [finish, setFinish] = useState(false);\n  const [host, setHost] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [party, setParty] = useState(0);\n  const [signed, setSigned] = useState(1);\n  const [skill, setSkilled] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const history = useHistory();\n\n  //하나의 기술 문자열을 담기 위한 샅애\n  const [eachSkill, setEachSkill] = useState(\"\");\n\n  //이미지를 업로드 하기 위한 상태들\n  let allInputs = { imgUrl: \"\" };\n  const [imageAsFile, setImageAsFile] = useState(\"\");\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      //console.log(user.displayName);\n      //console.log(user.email);\n      setHost(user.email);\n    } else {\n      console.log(\"유저 없는 뎁쇼\");\n    }\n  });\n\n  function delay(ms) {\n    return new Promise((resolve, reject) => {\n      //promise 객체 반환, async도 promise를 다루는 기술이란 것을 잊지 말것\n      setTimeout(resolve, ms);\n    });\n  }\n\n  let createDatabase = async () => {\n    let result = await handleFireBaseUpload(); //여기서 일단 이미지를 올린다.\n    await delay(2500);\n    if (result === false) {\n      //2차 안전장치\n      console.log(\"이미지를 올리지 않아서 아무 일도 안생길 거임\");\n    } else if (!comment || finish || !name || !party || !eachSkill) {\n      alert(\"모든 항목은 필수입니다\");\n      window.location.reload();\n    } else {\n      await howManyRegist(host);\n      await firestore\n        .collection(\"project\")\n        .doc(name)\n        .get()\n        .then(function (docName) {\n          if (docName.data() !== undefined) {\n            alert(\"중복된 프로젝트명입니다. 다른 프로젝트 이름을 정해주세요\");\n            window.location.reload();\n          } else if (name + \".png\" !== imageAsFile.name) {\n            alert(\"프로젝트 이름과 이미지 파일은 이름이 같아야 합니다.\");\n            window.location.reload();\n          } else {\n            firestore\n              .collection(\"project\")\n              .doc(name)\n              .set({\n                host: host,\n                comment: comment,\n                finish: finish,\n                name: name,\n                party: party,\n                signed: signed,\n                skill: skill,\n                term: term,\n                image: imageAsFile.name,\n                people: [host],\n              })\n              .then(async function () {\n                await addAppliedProject(host, name);\n                alert(\"프로젝트 등록에 성공했습니다\");\n                window.location.reload();\n              })\n              .catch(function (error) {\n                console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n              });\n          }\n        });\n    }\n  };\n\n  let skillbutton = () => {\n    if (skill.length > 2) {\n      alert(\"기술 스택은 3개까지만 넣을 수 있어용~\");\n    } else {\n      if (skill.includes(eachSkill.toLowerCase()) === false) {\n        setSkilled(skill.concat(eachSkill.toLowerCase()));\n      } else {\n        alert(\"중복된 기술이에용~\");\n      }\n    }\n  };\n\n  let handleImageAsFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    const image = e.target.files[0];\n    reader.onloadend = () => {\n      setImageAsFile(image);\n      setImageAsUrl(reader.result);\n    };\n    reader.readAsDataURL(image);\n  };\n\n  let handleFireBaseUpload = (e) => {\n    if (imageAsFile === \"\") {\n      alert(`이미지 파일을 올려 주세요!!!`);\n      return false;\n    } else {\n      console.log(\"이미지 업로드를 시작합니다\");\n      console.log(\"사진이름이 뭔지 확인해볼거야\" + imageAsFile.name);\n      const uploadTask = storage\n        .ref(`/project/${imageAsFile.name}`)\n        .put(imageAsFile);\n      uploadTask.on(\n        \"state_changed\",\n        (snapShot) => {\n          console.log(snapShot);\n        },\n        (err) => {\n          console.log(err);\n        },\n        () => {\n          storage\n            .ref(\"project\")\n            .child(imageAsFile.name)\n            .getDownloadURL()\n            .then((fireBaseUrl) => {\n              setImageAsUrl((prevObject) => ({\n                ...prevObject,\n                imgUrl: fireBaseUrl,\n              }));\n              console.log(\"유알엘이 뭔지 확인해볼거야\" + fireBaseUrl);\n              console.log(\"사진이름이 뭔지 확인해볼거야\" + imageAsFile.name);\n              firestore\n                .collection(\"project\")\n                .doc(imageAsFile.name)\n                .update({\n                  image: fireBaseUrl,\n                })\n                .then(function () {\n                  console.log(\n                    \"파이어베이스 업데이트 완료 이미지 url 파이어스토어에 업로드\"\n                  );\n                })\n                .catch(function (err) {\n                  //alert(err)\n                });\n            });\n        }\n      );\n      return true;\n    }\n  };\n\n  let howManyRegist = async (host) => {\n    console.log(\"-------------------------------------\");\n    await firestore\n      .collection(\"users\")\n      .doc(host)\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          console.log(\"Document data:\", doc.data());\n          let document = doc.data();\n          if (document.hostProject.length > 2) {\n            alert(\n              \"프로젝트를 3개 이상 등록하실려면 프라이빗 계정으로 전환하세요\"\n            );\n            window.location.reload();\n          } else {\n            console.log(\"참\");\n          }\n        } else {\n          console.log(\"문서가 존재하지 않습니다\");\n        }\n      })\n      .catch(function (error) {\n        console.log(\"에러는 다음과 같음\" + error);\n      });\n    console.log(\"-------------------------------------\");\n  };\n\n  let addAppliedProject = async (host, name) => {\n    console.log(\"여기에 들어와 지는지 알고 싶어요!\" + host + \" / \" + name);\n    firestore\n      .collection(\"users\")\n      .doc(host)\n      .update({\n        hostProject: firebase.firestore.FieldValue.arrayUnion(name), //파이어스토어 배열 건드릴 때에는 절대 세미콜론 넣지마!!!\n      })\n      .then(function () {\n        console.log(\"유저 정보에도 자기가 등록한 프로젝트가 들어갔나요?\");\n      })\n      .catch(function (err) {\n        console.log(\"발생한 에러는 다음과 같습니다\" + err);\n      });\n  };\n\n  return (\n    <div className={styles.regist}>\n      <div className={styles.projectint}>\n        <span>\n          <p>\n            프로젝트 이름 :{\" \"}\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></input>\n          </p>\n          <div>\n            <form onSubmit={handleFireBaseUpload}>\n              <input\n                type=\"file\"\n                accept=\"image/png\"\n                onChange={handleImageAsFile}\n              />\n            </form>\n          </div>\n          <div style={{ marginTop: \"10px\" }}>\n            {imageAsFile !== \"\" ? (\n              <img src={imageAsUrl} style={{ width: \"50%\" }} />\n            ) : (\n              <span>\n                png 파일을 선택해주세요. <br />\n                파일의 이름은 프로젝트의 이름과 동일해야 합니다.\n              </span>\n            )}\n          </div>\n        </span>\n        <span>\n          <p>\n            모집인원 :{\" \"}\n            <input\n              type=\"number\"\n              value={party}\n              onChange={(e) => setParty(e.target.value)}\n            ></input>\n          </p>\n          <p>\n            현재 등록 인원 :{\" \"}\n            <input\n              type=\"number\"\n              value={signed}\n              onChange={(e) => setSigned(e.target.value)}\n            ></input>\n          </p>\n          <p>\n            프로젝트 기간 :{\" \"}\n            <input\n              type=\"date\"\n              value={term}\n              onChange={(e) => setTerm(e.target.value)}\n            ></input>\n          </p>\n\n          <div>\n            기술 스택 :{\" \"}\n            <input\n              type=\"text\"\n              value={eachSkill}\n              onChange={(e) => setEachSkill(e.target.value)}\n            ></input>\n            <button onClick={skillbutton}>클릭</button>\n            <div className={styles.teckstack}>\n              <li>\n                기술스택1 : <div style={{ width: \"50%\" }}>{skill[0]}</div>\n              </li>\n              <li>\n                기술스택2 : <div style={{ width: \"50%\" }}>{skill[1]}</div>\n              </li>\n              <li>\n                기술스택3 : <div style={{ width: \"50%\" }}>{skill[2]}</div>\n              </li>\n            </div>\n          </div>\n        </span>\n      </div>\n\n      <p>\n        프로젝트 개요 :{\" \"}\n        <div style={{ paddingTop: \"20px\" }}>\n          <textarea\n            type=\"text\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            style={{ width: \"50vh\", height: \"15vh\" }}\n          ></textarea>\n        </div>\n      </p>\n      <div className={styles.registbtn}>\n        <span>\n          <button onClick={createDatabase}>등록하기</button>\n        </span>\n        <span style={{ paddingLeft: \"20px\" }}>\n          <button onClick={() => history.push(\"/\")}>취소</button>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Regist;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectList.js",["36","37","38","39","40","41","42","43","44"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectListDetail.js",["45","46","47","48","49","50","51","52","53","54"],"import styles from \"../../css/MyPage/MyProjectListDetail.module.css\";\nimport { useState, useRef, useCallback } from \"react\";\nimport { firestore } from \"../../firebase\";\nimport { storage } from \"../../firebase\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction MyProjectListDetail() {\n  //넘어온 프로젝트 이름을 통해 데이터베이스에서 검색\n  const location = useLocation();\n  const projectName = location.state.name;\n  let dataFire = JSON.parse(localStorage.getItem(\"fireStoreData\"));\n  let projectData = dataFire.filter((el) => {\n    if (el.name === projectName) return el;\n  });\n  console.log(\"읽어온 현재 프로젝트 데이터\", projectData[0]);\n\n  const [comment, setComment] = useState(projectData[0].comment);\n  const [host, setHost] = useState(\"\");\n  const [party, setParty] = useState(projectData[0].party);\n  const [skill, setSkilled] = useState(projectData[0].skill);\n  const [term, setTerm] = useState(projectData[0].term);\n\n  const history = useHistory();\n\n  //하나의 기술 문자열을 담기 위한 샅애\n  const [eachSkill, setEachSkill] = useState(\"\");\n\n  //이미지를 업로드 하기 위한 상태들\n  let allInputs = { imgUrl: \"\" };\n  const [imageAsFile, setImageAsFile] = useState(\"\");\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs);\n\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      //console.log(user.displayName);\n      //console.log(user.email);\n      setHost(user.email);\n    } else {\n      console.log(\"유저 없는 뎁쇼\");\n    }\n  });\n\n  // let getFirestoreData = async () => {\n  //   let eachStore = []\n  //   let result = await firestore.collection(\"project\").get().then(function (querySnapshot) {               //result는 await를 하기 위해서 만들어낸 변수\n  //     querySnapshot.forEach(async function(doc) {\n  //       // doc.data() is never undefined for query doc snapshots\n  //       //console.log(doc.id, \" => \", doc.data())\n  //       console.log(\"요청하는 이미지는 다음과 같습니다 :\" + doc.data().image)\n  //       let image = await getFireBaseImage(doc.data().image)\n  //       let eachData = {\n  //         'comment' : doc.data().comment,\n  //         'finish' : doc.data().finish,\n  //         'host' : doc.data().host,\n  //         'image' : image,\n  //         'name' : doc.data().name,\n  //         'party' : doc.data().party,\n  //         'signed' : doc.data().signed,\n  //         'skill' : doc.data().skill,\n  //         'term' : doc.data().term\n  //       }\n  //       eachStore.push(eachData)\n  //     });\n  //   })\n  //   return eachStore\n  // }\n\n  let updateDatabase = async () => {\n    console.log(\n      \"수정되는 데이터:\",\n      \"개요:\",\n      comment,\n      \"인원:\",\n      party,\n      \"스킬:\",\n      skill,\n      \"기간\",\n      term\n    );\n    console.log(\"현재 데이터:\", projectData[0]);\n    firestore\n      .collection(\"project\")\n      .doc(projectData[0].name)\n      .update({\n        comment: comment,\n        party: party,\n        skill: skill,\n        term: term,\n      })\n      .then(function () {\n        alert(\"프로젝트 수정에 성공했습니다\");\n        console.log(localStorage.fireStoreData);\n        history.push(\"/mypage/myprojectlist\");\n      })\n      .catch(function (error) {\n        console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n      });\n  };\n\n  let deleteProjectData = async () => {\n    firestore\n      .collection(\"project\")\n      .doc(projectName)\n      .delete()\n      .then(() => {\n        alert(\"프로젝트를 성공적으로 삭제했습니다\");\n        history.push(\"/mypage/myprojectlist\");\n      })\n      .catch((error) => {\n        console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n      });\n  };\n\n  let skillbutton = () => {\n    if (skill.length > 2) {\n      alert(\"기술 스택은 3개까지만 넣을 수 있어용~\");\n    } else {\n      if (skill.includes(eachSkill.toLowerCase()) === false) {\n        setSkilled(skill.concat(eachSkill.toLowerCase()));\n      } else {\n        alert(\"중복된 기술이에용~\");\n      }\n    }\n  };\n\n  return (\n    <div className={styles.regist}>\n      <div className={styles.projectint}>\n        <span>\n          <p>프로젝트 이름 :{projectData[0].name}</p>\n\n          <div style={{ marginTop: \"10px\" }}>\n            <img src={projectData[0].image} style={{ width: \"50%\" }} />\n          </div>\n        </span>\n\n        <span>\n          <p>\n            모집인원 :{projectData[0].party}\n            <input\n              type=\"number\"\n              value={party}\n              onChange={(e) => setParty(e.target.value)}\n            ></input>\n          </p>\n          <p>현재 등록 인원 :{projectData[0].signed}</p>\n          <p>\n            프로젝트 기간 :{projectData[0].term}\n            <input\n              type=\"date\"\n              value={term}\n              onChange={(e) => setTerm(e.target.value)}\n            ></input>\n          </p>\n\n          <div>\n            기술 스택 :\n            {projectData[0].skill.map((el, idx) => {\n              return (\n                <div>\n                  <div className={styles.skill}>{el}</div>\n                  <input\n                    type=\"text\"\n                    value={eachSkill}\n                    onChange={(e) => setEachSkill(e.target.value)}\n                  ></input>\n                  <button>변경</button>\n                </div>\n              );\n            })}\n            <input\n              type=\"text\"\n              value={eachSkill}\n              onChange={(e) => setEachSkill(e.target.value)}\n            ></input>\n            <button onClick={skillbutton}>추가</button>\n            <div className={styles.teckstack}>\n              <li>\n                기술스택1 : <div style={{ width: \"50%\" }}>{skill[0]}</div>\n              </li>\n              <li>\n                기술스택2 : <div style={{ width: \"50%\" }}>{skill[1]}</div>\n              </li>\n              <li>\n                기술스택3 : <div style={{ width: \"50%\" }}>{skill[2]}</div>\n              </li>\n            </div>\n          </div>\n        </span>\n      </div>\n\n      <p>\n        프로젝트 개요 :{projectData[0].comment}\n        <div style={{ paddingTop: \"20px\" }}>\n          <textarea\n            type=\"text\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            style={{ width: \"50vh\", height: \"15vh\" }}\n          ></textarea>\n        </div>\n      </p>\n      <div className={styles.registbtn}>\n        <span>\n          <button onClick={updateDatabase}>수정하기</button>\n        </span>\n        <span style={{ paddingLeft: \"20px\" }}>\n          <button onClick={deleteProjectData}>삭제</button>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default MyProjectListDetail;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/RegistStatus.js",["55","56","57","58","59","60","61","62","63"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/firebase.js",[],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/Profile.js",["64","65","66","67"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/Project.js",["68","69","70","71","72","73","74","75"],{"ruleId":"76","severity":1,"message":"77","line":2,"column":20,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":2,"column":28,"nodeType":"78","messageId":"79","endLine":2,"endColumn":39},{"ruleId":"76","severity":1,"message":"81","line":11,"column":18,"nodeType":"78","messageId":"79","endLine":11,"endColumn":27},{"ruleId":"82","severity":1,"message":"83","line":237,"column":15,"nodeType":"84","endLine":237,"endColumn":64},{"ruleId":"76","severity":1,"message":"85","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":12},{"ruleId":"76","severity":1,"message":"86","line":22,"column":5,"nodeType":"78","messageId":"79","endLine":22,"endColumn":9},{"ruleId":"76","severity":1,"message":"87","line":24,"column":5,"nodeType":"78","messageId":"79","endLine":24,"endColumn":13},{"ruleId":"76","severity":1,"message":"88","line":25,"column":5,"nodeType":"78","messageId":"79","endLine":25,"endColumn":18},{"ruleId":"76","severity":1,"message":"89","line":26,"column":5,"nodeType":"78","messageId":"79","endLine":26,"endColumn":8},{"ruleId":"90","severity":1,"message":"91","line":32,"column":48,"nodeType":"92","messageId":"93","endLine":32,"endColumn":50},{"ruleId":"90","severity":1,"message":"91","line":38,"column":46,"nodeType":"92","messageId":"93","endLine":38,"endColumn":48},{"ruleId":"82","severity":1,"message":"83","line":107,"column":19,"nodeType":"84","endLine":115,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":141,"column":19,"nodeType":"84","endLine":148,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":2,"column":20,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":2,"column":28,"nodeType":"78","messageId":"79","endLine":2,"endColumn":39},{"ruleId":"76","severity":1,"message":"94","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":15,"column":42,"nodeType":"92","messageId":"93","endLine":15,"endColumn":44},{"ruleId":"76","severity":1,"message":"95","line":21,"column":10,"nodeType":"78","messageId":"79","endLine":21,"endColumn":14},{"ruleId":"76","severity":1,"message":"96","line":33,"column":10,"nodeType":"78","messageId":"79","endLine":33,"endColumn":21},{"ruleId":"76","severity":1,"message":"97","line":33,"column":23,"nodeType":"78","messageId":"79","endLine":33,"endColumn":37},{"ruleId":"76","severity":1,"message":"98","line":34,"column":10,"nodeType":"78","messageId":"79","endLine":34,"endColumn":20},{"ruleId":"76","severity":1,"message":"99","line":34,"column":22,"nodeType":"78","messageId":"79","endLine":34,"endColumn":35},{"ruleId":"82","severity":1,"message":"83","line":136,"column":13,"nodeType":"84","endLine":136,"endColumn":72},{"ruleId":"76","severity":1,"message":"100","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":14},{"ruleId":"76","severity":1,"message":"101","line":8,"column":9,"nodeType":"78","messageId":"79","endLine":8,"endColumn":17},{"ruleId":"76","severity":1,"message":"86","line":27,"column":5,"nodeType":"78","messageId":"79","endLine":27,"endColumn":9},{"ruleId":"76","severity":1,"message":"102","line":28,"column":5,"nodeType":"78","messageId":"79","endLine":28,"endColumn":10},{"ruleId":"76","severity":1,"message":"87","line":29,"column":5,"nodeType":"78","messageId":"79","endLine":29,"endColumn":13},{"ruleId":"76","severity":1,"message":"88","line":30,"column":5,"nodeType":"78","messageId":"79","endLine":30,"endColumn":18},{"ruleId":"76","severity":1,"message":"89","line":31,"column":5,"nodeType":"78","messageId":"79","endLine":31,"endColumn":8},{"ruleId":"76","severity":1,"message":"103","line":35,"column":9,"nodeType":"78","messageId":"79","endLine":35,"endColumn":17},{"ruleId":"76","severity":1,"message":"104","line":49,"column":9,"nodeType":"78","messageId":"79","endLine":49,"endColumn":17},{"ruleId":"76","severity":1,"message":"85","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":12},{"ruleId":"76","severity":1,"message":"88","line":13,"column":5,"nodeType":"78","messageId":"79","endLine":13,"endColumn":18},{"ruleId":"76","severity":1,"message":"89","line":14,"column":5,"nodeType":"78","messageId":"79","endLine":14,"endColumn":8},{"ruleId":"82","severity":1,"message":"83","line":21,"column":9,"nodeType":"84","endLine":21,"endColumn":62},{"ruleId":"76","severity":1,"message":"105","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":20},{"ruleId":"76","severity":1,"message":"106","line":2,"column":22,"nodeType":"78","messageId":"79","endLine":2,"endColumn":26},{"ruleId":"76","severity":1,"message":"107","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":16},{"ruleId":"76","severity":1,"message":"108","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":19},{"ruleId":"76","severity":1,"message":"94","line":6,"column":10,"nodeType":"78","messageId":"79","endLine":6,"endColumn":17},{"ruleId":"76","severity":1,"message":"109","line":8,"column":10,"nodeType":"78","messageId":"79","endLine":8,"endColumn":19},{"ruleId":"76","severity":1,"message":"110","line":19,"column":18,"nodeType":"78","messageId":"79","endLine":19,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":84,"column":19,"nodeType":"84","endLine":92,"endColumn":20},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'setFinish' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'auth' is defined but never used.","'name' is assigned a value but never used.","'photoUrl' is assigned a value but never used.","'emailVerified' is assigned a value but never used.","'uid' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'storage' is defined but never used.","'host' is assigned a value but never used.","'imageAsFile' is assigned a value but never used.","'setImageAsFile' is assigned a value but never used.","'imageAsUrl' is assigned a value but never used.","'setImageAsUrl' is assigned a value but never used.","'Slider' is defined but never used.","'settings' is assigned a value but never used.","'email' is assigned a value but never used.","'dataFire' is assigned a value but never used.","'userData' is assigned a value but never used.","'withRouter' is defined but never used.","'Link' is defined but never used.","'firebase' is defined but never used.","'firestore' is defined but never used.","'useEffect' is defined but never used.","'setDataFire' is assigned a value but never used."]