[{"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Guide/Guide.js":"1","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/firebase.js":"2","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MainPage/MainPage.js":"3","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Regist/Regist.js":"4","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/RegistStatus.js":"5","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/ProjectDetail.js":"6","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyPage.js":"7","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectListDetail.js":"8","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/Project.js":"9","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/index.js":"10","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectList.js":"11","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/ApplyStatus.js":"12","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/Profile.js":"13","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MainPage/FirstBlock.js":"14","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/App.js":"15","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Menu.js":"16"},{"size":1543,"mtime":1615181996948,"results":"17","hashOfConfig":"18"},{"size":858,"mtime":1610675364596,"results":"19","hashOfConfig":"18"},{"size":272,"mtime":1615532648732,"results":"20","hashOfConfig":"18"},{"size":10355,"mtime":1615533719303,"results":"21","hashOfConfig":"18"},{"size":7198,"mtime":1615182849282,"results":"22","hashOfConfig":"18"},{"size":4217,"mtime":1615183194004,"results":"23","hashOfConfig":"18"},{"size":2250,"mtime":1615181773690,"results":"24","hashOfConfig":"18"},{"size":7856,"mtime":1615181702812,"results":"25","hashOfConfig":"18"},{"size":2668,"mtime":1615533857879,"results":"26","hashOfConfig":"18"},{"size":207,"mtime":1610419429641,"results":"27","hashOfConfig":"18"},{"size":6507,"mtime":1615181741508,"results":"28","hashOfConfig":"18"},{"size":4749,"mtime":1615181930703,"results":"29","hashOfConfig":"18"},{"size":786,"mtime":1615534080315,"results":"30","hashOfConfig":"18"},{"size":2242,"mtime":1615181973653,"results":"31","hashOfConfig":"18"},{"size":2393,"mtime":1615534124933,"results":"32","hashOfConfig":"18"},{"size":5449,"mtime":1615183304220,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"26wkim",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Guide/Guide.js",[],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/firebase.js",[],["73","74"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MainPage/MainPage.js",[],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Regist/Regist.js",["75","76","77"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/RegistStatus.js",["78","79","80","81","82"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/ProjectDetail.js",["83","84"],"import React, { memo } from \"react\";\nimport { useLocation } from \"react-router\";\nimport styles from \"../../css/Project/ProjectDetail.module.css\";\nimport { useHistory } from \"react-router-dom\";\nimport firebase from \"firebase/app\";\nimport { firestore } from \"../../firebase\";\n\nconst ProjectDetail = memo(() => {\n  let location = useLocation();\n  let photo = location.state.photo;\n  let name = location.state.name;\n\n  let applied = null;\n  let account = undefined;\n\n  let history = useHistory();\n\n  let dataFire = JSON.parse(localStorage.getItem(\"fireStoreData\")).filter(\n    (eachData) => {\n      if (eachData.name === name) return eachData;\n    }\n  );\n\n  let term = dataFire[0].term;\n  let party = dataFire[0].party;\n  let signed = dataFire[0].signed;\n  let comment = dataFire[0].comment;\n  let host = dataFire[0].host; //프로젝트 주인장 아이디\n\n  function delay(ms) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  let checkLogInUser = () => {\n    firebase.auth().onAuthStateChanged(async (user) => {\n      if (user) {\n        account = user.email;\n      } else {\n        console.log(\"위에서 반환이 되지 않으면 undefined가 나감\");\n      }\n    });\n  };\n\n  let readProjectData = (account) => {\n    firestore\n      .collection(\"users\")\n      .doc(account)\n      .get()\n      .then(async function (doc) {\n        if (doc.exists) {\n          applied = doc.data().appliedProject;\n        } else {\n          console.log(\"문서가 존재하지 않습니다\");\n        }\n      });\n  };\n  //----------------------------------------------------------------------------------\n\n  let applyProject = async () => {\n    checkLogInUser(); //프로젝트 신청자 아이디\n    await delay(800);\n    readProjectData(account);\n    await delay(800);\n\n    if (account === undefined) {\n      alert(\"로그인을 하셔야 프로젝트에 지원 하실 수 있으세요\");\n    } else if (account === host) {\n      alert(\"자기 프로젝트에는 지원하실 수 없어요\");\n    } else if (applied.includes(name) === true) {\n      alert(\"이미 지원하신 프로젝트입니다\");\n    } else {\n      await firestore\n        .collection(\"users\")\n        .doc(host)\n        .update({\n          submittedProject: firebase.firestore.FieldValue.arrayUnion({\n            applicant: account,\n            project: name,\n          }),\n        });\n      await firestore\n        .collection(\"users\")\n        .doc(account)\n        .update({\n          appliedProject: firebase.firestore.FieldValue.arrayUnion(name),\n        });\n      await delay(1500);\n      alert(\"지원을 성공적으로 마치셨습니다.\");\n      window.location.reload();\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.projectDetail}>\n        <div className={styles.header}>\n          <h2>프로젝트명: {name}</h2>\n        </div>\n\n        <div>\n          <img className={styles.img} src={photo} alt=\"project\"></img>\n        </div>\n        <div className={styles.text}>\n          <div>예상기간: {term}</div>\n          <div style={{ marginTop: \"2vh\" }}>예상인원: {party}명</div>\n          <div style={{ marginTop: \"2vh\" }}>현재지원: {signed}명</div>\n          <div style={{ marginTop: \"2vh\" }}>\n            사용언어:{\" \"}\n            {dataFire.map((eachData) => {\n              {\n                return eachData.skill.map((skill) => {\n                  return (\n                    <span className={styles.skill} key={skill}>\n                      {skill}\n                    </span>\n                  );\n                });\n              }\n            })}\n          </div>\n        </div>\n\n        <div className={styles.explain}>\n          <h3>\n            프로젝트 설명\n            <br />\n            {comment}\n          </h3>\n        </div>\n        <div className={styles.btn}>\n          <span>\n            <button onClick={applyProject}>지원하기</button>\n          </span>\n          <span>\n            <button\n              style={{ marginLeft: \"6vh\" }}\n              onClick={() => history.goBack()}\n            >\n              뒤로가기\n            </button>\n          </span>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default ProjectDetail;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyPage.js",[],["85","86"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectListDetail.js",["87","88","89","90","91","92","93"],"import styles from \"../../css/MyPage/MyProjectListDetail.module.css\";\nimport { useState } from \"react\";\nimport { firestore } from \"../../firebase\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { memo } from \"react\";\n\nlet submittedData;\nlet appliedUser = [];\nlet joinUser = [];\nlet submittedApplyObject = [];\n\nconst MyProjectListDetail = memo(() => {\n  //넘어온 프로젝트 이름을 통해 데이터베이스에서 검색\n  const location = useLocation();\n  const projectName = location.state.name;\n  let dataFire = JSON.parse(localStorage.getItem(\"fireStoreData\"));\n  let projectData = dataFire.filter((el) => {\n    if (el.name === projectName) return el;\n  });\n\n  const [comment, setComment] = useState(projectData[0].comment);\n  const [host, setHost] = useState(\"\");\n  const [party, setParty] = useState(projectData[0].party);\n  const [skill, setSkilled] = useState(projectData[0].skill);\n  const [term, setTerm] = useState(projectData[0].term);\n  const history = useHistory();\n\n  function delay(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  firebase.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      setHost(user.email);\n    } else {\n      console.log(\"유저 없는 뎁쇼\");\n    }\n  });\n\n  let updateDatabase = async () => {\n    firestore\n      .collection(\"project\")\n      .doc(projectData[0].name)\n      .update({\n        comment: comment,\n        party: party,\n        skill: skill,\n        term: term,\n      })\n      .then(function () {\n        alert(\"프로젝트 수정에 성공했습니다\");\n        console.log(localStorage.fireStoreData);\n        history.push(\"/mypage/myprojectlist\");\n      })\n      .catch(function (error) {\n        console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n      });\n  };\n\n  //------------------------------------------------------------------------------------------------------------------------프로젝트 지우기\n\n  let deleteProjectData = async () => {\n    await getMySubmittedProject(host);\n    await delay(500);\n\n    await findUserApplyDeleteProject(projectName);\n    await delay(200);\n\n    await delay(200);\n    await deleteProjectAppliedUser(projectName);\n    await delay(200);\n    await findJoinProjectUser(host, projectName);\n    await delay(200);\n    await deleteUserJoinProject(joinUser, projectName);\n    await delay(200);\n    await deleteHostProject(host, projectName);\n    await delay(200);\n    await submittedDataInHostDelete(host);\n    await delay(200);\n    firestore\n      .collection(\"project\")\n      .doc(projectName)\n      .delete()\n      .then(() => {\n        alert(\"프로젝트를 성공적으로 삭제했습니다\");\n        history.push(\"/mypage/myprojectlist\");\n      })\n      .catch((error) => {\n        console.error(\"다음과 같은 에러가 발생했습니다 : \" + error);\n      });\n  };\n\n  let deleteHostProject = (host, projectName) => {\n    firestore\n      .collection(\"users\")\n      .doc(host)\n      .update({\n        hostProject: firebase.firestore.FieldValue.arrayRemove(projectName),\n      });\n  };\n\n  let findJoinProjectUser = (host, projectName) => {\n    firebase\n      .firestore()\n      .collection(\"project\")\n      .doc(projectName)\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          for (let i = 0; i < doc.data().people.length; i++) {\n            if (doc.data().people[i] !== host) {\n              joinUser.push(doc.data().people[i]);\n            }\n          }\n        } else {\n          console.log(\"문서가 존재하지 않음\");\n        }\n      });\n  };\n\n  let deleteUserJoinProject = (joinUser, projectName) => {\n    joinUser.map((index) => {\n      firebase\n        .firestore()\n        .collection(\"users\")\n        .doc(index)\n        .update({\n          joinProject: firebase.firestore.FieldValue.arrayRemove(projectName),\n        });\n    });\n  };\n\n  let submittedDataInHostDelete = (host) => {\n    submittedApplyObject.map((index) => {\n      firebase //\n        .firestore()\n        .collection(\"users\")\n        .doc(host)\n        .update({\n          submittedProject: firebase.firestore.FieldValue.arrayRemove(index),\n        });\n    });\n  };\n\n  let getMySubmittedProject = (host) => {\n    firebase\n      .firestore()\n      .collection(\"users\")\n      .doc(host)\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          submittedData = doc.data().submittedProject;\n        } else {\n          console.log(\"문서가 존재하지 않습니다\");\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  let findUserApplyDeleteProject = (projectName) => {\n    if (appliedUser.length === 0) {\n      submittedData.map((index) => {\n        if (index[\"project\"] === projectName) {\n          submittedApplyObject.push(index);\n          appliedUser.push(index[\"applicant\"]);\n        }\n      });\n    }\n  };\n\n  let deleteProjectAppliedUser = async (projectName) => {\n    appliedUser.map((index) => {\n      firebase\n        .firestore()\n        .collection(\"users\")\n        .doc(index)\n        .update({\n          appliedProject: firebase.firestore.FieldValue.arrayRemove(\n            projectName\n          ),\n        });\n    });\n  };\n\n  return (\n    <div className={styles.regist}>\n      <div className={styles.projectint}>\n        <span>\n          <p>프로젝트 이름 :{projectData[0].name}</p>\n          <div style={{ marginTop: \"10px\" }}>\n            <img src={projectData[0].image} style={{ width: \"40vh\" }} />\n          </div>\n        </span>\n        <span>\n          <p>\n            모집 인원 :{\" \"}\n            <input\n              style={{ border: \"3px solid black\", fontWeight: \"bold\" }}\n              type=\"number\"\n              value={party}\n              placeholder={projectData[0].party}\n              onChange={(e) => setParty(e.target.value)}\n            ></input>{\" \"}\n            명\n          </p>\n          <p>등록 인원 :{projectData[0].signed}명</p>\n          <p>\n            예상 기간 :{\" \"}\n            <input\n              style={{ border: \"3px solid black\", fontWeight: \"bold\" }}\n              type=\"date\"\n              value={term}\n              placeholder={projectData[0].term}\n              onChange={(e) => setTerm(e.target.value)}\n            ></input>\n          </p>\n          <div>\n            사용 언어 :\n            <div className={styles.teckstack}>\n              <li>\n                사용 언어① : <div style={{ width: \"50%\" }}>{skill[0]}</div>\n              </li>\n              <li>\n                사용 언어② : <div style={{ width: \"50%\" }}>{skill[1]}</div>\n              </li>\n              <li>\n                사용 언어③ : <div style={{ width: \"50%\" }}>{skill[2]}</div>\n              </li>\n            </div>\n          </div>\n        </span>\n      </div>\n      <div style={{ marginLeft: \"0%\", marginTop: \"10vh\" }}>\n        <p>\n          프로젝트 개요 :{\" \"}\n          <div style={{ paddingTop: \"20px\" }}>\n            <textarea\n              placeholder={projectData[0].comment}\n              type=\"text\"\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n              style={{\n                width: \"50vh\",\n                height: \"15vh\",\n                border: \"3px solid black\",\n                fontWeight: \"bold\",\n              }}\n            ></textarea>\n          </div>\n        </p>\n      </div>\n      <div className={styles.registbtn}>\n        <span>\n          <button onClick={updateDatabase}>수정하기</button>\n        </span>\n        <span style={{ paddingLeft: \"6vh\" }}>\n          <button onClick={deleteProjectData}>삭제하기</button>\n        </span>\n      </div>\n    </div>\n  );\n});\nexport default MyProjectListDetail;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Project/Project.js",["94","95"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/index.js",[],["96","97"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/MyProjectList.js",["98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"import React from \"react\";\nimport styles from \"../../css/MyPage/MyProjectList.module.css\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport firebase from \"firebase/app\";\nimport { storage } from \"../../firebase\";\nimport { memo } from \"react\";\n\nconst MyProjectList = memo((props) => {\n  const history = useHistory();\n\n  let user = firebase.auth().currentUser;\n  let name, email, photoUrl, uid, emailVerified;\n\n  if (user != null) {\n    name = user.displayName;\n    email = user.email;\n    photoUrl = user.photoURL;\n    emailVerified = user.emailVerified;\n    uid = user.uid;\n  }\n\n  let hostProjectData, joinedProjectData;\n\n  let myRegisted = [];\n  let myJoined = [];\n  const [myRegistedProject, setMyRegistedProject] = useState([]);\n  const [myJoinedProject, setMyJoinedProject] = useState([]);\n\n  useEffect(async () => {\n    let user = firebase.auth().currentUser;\n    await delay(100);\n    if (user != null) {\n      name = user.displayName;\n      email = user.email;\n      photoUrl = user.photoURL;\n      emailVerified = user.emailVerified;\n      uid = user.uid;\n    }\n\n    await getMyHostData(email);\n    await getMyJoinedData(email);\n    await delay(1000);\n\n    setMyRegistedProject(myRegisted);\n    await delay(1000);\n    setMyJoinedProject(myJoined);\n    await delay(1000);\n  }, []);\n\n  function delay(ms) {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  let getMyHostData = async (email) => {\n    firebase\n      .firestore()\n      .collection(\"users\")\n      .doc(email)\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          hostProjectData = doc.data().hostProject;\n          getMyRegistedProject(hostProjectData);\n        } else {\n          console.log(\"문서가 존재하지 않습니다\");\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  let getMyJoinedData = async (email) => {\n    firebase\n      .firestore()\n      .collection(\"users\")\n      .doc(email)\n      .get()\n      .then(function (doc) {\n        if (doc.exists) {\n          joinedProjectData = doc.data().joinProject;\n          getMyJoinedProject(joinedProjectData);\n        } else {\n          console.log(\"문서가 존재하지 않습니다\");\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  let getMyRegistedProject = async (data) => {\n    data.map((el) => {\n      firebase\n        .firestore()\n        .collection(\"project\")\n        .doc(el)\n        .get()\n        .then((doc) => {\n          let docData = doc.data();\n          getFireBaseImage(docData.image) //\n            .then((url) => {\n              docData.image = url;\n            });\n\n          myRegisted.push(docData);\n        });\n    });\n  };\n\n  let getMyJoinedProject = async (data) => {\n    data.map((el) => {\n      firebase\n        .firestore()\n        .collection(\"project\")\n        .doc(el)\n        .get()\n        .then((doc) => {\n          let docData = doc.data();\n          getFireBaseImage(docData.image).then((url) => {\n            docData.image = url;\n          });\n          myJoined.push(docData);\n        });\n    });\n  };\n\n  let getFireBaseImage = async (image) => {\n    return storage\n      .ref(\"project\")\n      .child(image)\n      .getDownloadURL()\n      .then((url) => {\n        return url;\n      })\n      .catch((error) => {\n        console.log(\"이미지를 받아오지 못했습니다.\" + error);\n      });\n  };\n\n  let photo = null;\n  let projectName = null;\n  let period = null;\n  let person = null;\n  let lang = null;\n\n  let handleClick = (e) => {\n    photo = e.target.src;\n    projectName = e.target.name;\n    period = e.target.period;\n    person = e.target.person;\n    lang = e.target.lang;\n\n    history.push({\n      pathname: \"/mypage/myprojectlistdetail\",\n      state: {\n        photo: photo,\n        name: projectName,\n        period: period,\n        person: person,\n        lang: lang,\n      },\n    });\n  };\n\n  return (\n    <div className={styles.header}>\n      <div>내가 등록한 프로젝트</div>\n      <div className={styles.firstContainer}>\n        {myRegistedProject.map((eachData) => {\n          return (\n            <div className={styles.cardwraper}>\n              <div className={styles.card}>\n                <div className={styles.card_img}>\n                  <img\n                    src={eachData.image}\n                    name={eachData.name}\n                    period={eachData.term}\n                    person={eachData.party}\n                    lang={eachData.skill}\n                    className={styles.photo}\n                    onClick={handleClick}\n                  ></img>\n                </div>\n              </div>\n              <ul>\n                <li>프로젝트 : {eachData.name}</li>\n                <li>예상기간 : {eachData.term}</li>\n                <li>현재인원 : {eachData.party}명</li>\n                <li>\n                  사용언어 :{\" \"}\n                  {eachData.skill.map((el) => {\n                    return <span className={styles.skill}>{el}</span>;\n                  })}\n                </li>\n              </ul>\n            </div>\n          );\n        })}\n      </div>\n\n      <div style={{ marginTop: \"5vh\" }}>내가 참가 중인 프로젝트</div>\n      <div className={styles.secondContainer}>\n        {myJoinedProject.map((eachData) => {\n          return (\n            <div className={styles.cardwraper}>\n              <div className={styles.card}>\n                <div className={styles.card_img}>\n                  <img\n                    key={Date.now()}\n                    src={eachData.image}\n                    name={eachData.name}\n                    period={eachData.term}\n                    person={eachData.party}\n                    lang={eachData.skill}\n                    className={styles.photo}\n                  ></img>\n                </div>\n              </div>\n              <ul>\n                <li>프로젝트 이름:{eachData.name}</li>\n                <li>예상 기간: {eachData.term}</li>\n                <li>현재 인원: {eachData.party}</li>\n                <li>\n                  사용언어 :{\" \"}\n                  {eachData.skill.map((el) => {\n                    return <span className={styles.skill}>{el}</span>;\n                  })}\n                </li>\n              </ul>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n});\n\nexport default MyProjectList;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/ApplyStatus.js",["112","113","114","115","116","117","118"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MyPage/Profile.js",["119","120","121"],"import React from \"react\";\nimport styles from \"../../css/MyPage/Profile.module.css\";\nimport firebase from \"firebase/app\";\nimport { memo } from \"react\";\n\nconst Profile = memo((props) => {\n  let user = firebase.auth().currentUser;\n  let name, email, photoUrl, uid, emailVerified;\n\n  if (user != null) {\n    name = user.displayName;\n    email = user.email;\n    photoUrl = user.photoURL;\n    emailVerified = user.emailVerified;\n    uid = user.uid;\n  }\n\n  return (\n    <div className={styles.header}>\n      <div>\n        <img src={photoUrl} style={{ borderRadius: \"50px\" }}></img>\n      </div>\n      <div style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n        {name} 님, 환영합니다.\n      </div>\n      <div>이메일: {email}</div>\n    </div>\n  );\n});\n\nexport default Profile;\n","/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/MainPage/FirstBlock.js",[],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/App.js",["122","123","124","125"],"/Users/jeongbyeongju/Desktop/immersive/Final-Project/forum_client/forum_project/src/component/Menu.js",["126","127","128","129","130","131"],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":11,"column":18,"nodeType":"138","messageId":"139","endLine":11,"endColumn":27},{"ruleId":"136","severity":1,"message":"140","line":15,"column":18,"nodeType":"138","messageId":"139","endLine":15,"endColumn":27},{"ruleId":"141","severity":1,"message":"142","line":238,"column":15,"nodeType":"143","endLine":238,"endColumn":65},{"ruleId":"144","severity":1,"message":"145","line":18,"column":13,"nodeType":"146","endLine":34,"endColumn":4},{"ruleId":"136","severity":1,"message":"147","line":22,"column":7,"nodeType":"138","messageId":"139","endLine":22,"endColumn":11},{"ruleId":"136","severity":1,"message":"148","line":24,"column":7,"nodeType":"138","messageId":"139","endLine":24,"endColumn":15},{"ruleId":"136","severity":1,"message":"149","line":25,"column":7,"nodeType":"138","messageId":"139","endLine":25,"endColumn":20},{"ruleId":"136","severity":1,"message":"150","line":26,"column":7,"nodeType":"138","messageId":"139","endLine":26,"endColumn":10},{"ruleId":"151","severity":1,"message":"152","line":19,"column":16,"nodeType":"146","messageId":"153","endLine":19,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":112,"column":15,"nodeType":"156","messageId":"157","endLine":120,"endColumn":16},{"ruleId":"132","replacedBy":"158"},{"ruleId":"134","replacedBy":"159"},{"ruleId":"151","severity":1,"message":"152","line":21,"column":42,"nodeType":"146","messageId":"153","endLine":21,"endColumn":44},{"ruleId":"136","severity":1,"message":"160","line":28,"column":17,"nodeType":"138","messageId":"139","endLine":28,"endColumn":27},{"ruleId":"151","severity":1,"message":"161","line":128,"column":26,"nodeType":"146","messageId":"162","endLine":128,"endColumn":28},{"ruleId":"151","severity":1,"message":"161","line":140,"column":38,"nodeType":"146","messageId":"162","endLine":140,"endColumn":40},{"ruleId":"151","severity":1,"message":"161","line":171,"column":33,"nodeType":"146","messageId":"162","endLine":171,"endColumn":35},{"ruleId":"151","severity":1,"message":"161","line":181,"column":29,"nodeType":"146","messageId":"162","endLine":181,"endColumn":31},{"ruleId":"141","severity":1,"message":"142","line":200,"column":13,"nodeType":"143","endLine":200,"endColumn":73},{"ruleId":"136","severity":1,"message":"163","line":16,"column":18,"nodeType":"138","messageId":"139","endLine":16,"endColumn":29},{"ruleId":"141","severity":1,"message":"142","line":57,"column":19,"nodeType":"143","endLine":66,"endColumn":20},{"ruleId":"132","replacedBy":"164"},{"ruleId":"134","replacedBy":"165"},{"ruleId":"144","severity":1,"message":"145","line":31,"column":13,"nodeType":"146","endLine":50,"endColumn":4},{"ruleId":"136","severity":1,"message":"147","line":35,"column":7,"nodeType":"138","messageId":"139","endLine":35,"endColumn":11},{"ruleId":"144","severity":1,"message":"166","line":35,"column":14,"nodeType":"167","endLine":35,"endColumn":30},{"ruleId":"144","severity":1,"message":"168","line":36,"column":15,"nodeType":"167","endLine":36,"endColumn":25},{"ruleId":"136","severity":1,"message":"148","line":37,"column":7,"nodeType":"138","messageId":"139","endLine":37,"endColumn":15},{"ruleId":"144","severity":1,"message":"169","line":37,"column":18,"nodeType":"167","endLine":37,"endColumn":31},{"ruleId":"136","severity":1,"message":"149","line":38,"column":7,"nodeType":"138","messageId":"139","endLine":38,"endColumn":20},{"ruleId":"144","severity":1,"message":"170","line":38,"column":23,"nodeType":"167","endLine":38,"endColumn":41},{"ruleId":"136","severity":1,"message":"150","line":39,"column":7,"nodeType":"138","messageId":"139","endLine":39,"endColumn":10},{"ruleId":"144","severity":1,"message":"171","line":39,"column":13,"nodeType":"167","endLine":39,"endColumn":21},{"ruleId":"151","severity":1,"message":"161","line":97,"column":19,"nodeType":"146","messageId":"162","endLine":97,"endColumn":21},{"ruleId":"151","severity":1,"message":"161","line":116,"column":19,"nodeType":"146","messageId":"162","endLine":116,"endColumn":21},{"ruleId":"141","severity":1,"message":"142","line":179,"column":19,"nodeType":"143","endLine":187,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":213,"column":19,"nodeType":"143","endLine":221,"endColumn":20},{"ruleId":"136","severity":1,"message":"172","line":12,"column":5,"nodeType":"138","messageId":"139","endLine":12,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":23,"column":13,"nodeType":"146","endLine":39,"endColumn":4},{"ruleId":"136","severity":1,"message":"147","line":26,"column":7,"nodeType":"138","messageId":"139","endLine":26,"endColumn":11},{"ruleId":"136","severity":1,"message":"148","line":28,"column":7,"nodeType":"138","messageId":"139","endLine":28,"endColumn":15},{"ruleId":"136","severity":1,"message":"149","line":29,"column":7,"nodeType":"138","messageId":"139","endLine":29,"endColumn":20},{"ruleId":"136","severity":1,"message":"150","line":30,"column":7,"nodeType":"138","messageId":"139","endLine":30,"endColumn":10},{"ruleId":"144","severity":1,"message":"173","line":39,"column":6,"nodeType":"174","endLine":39,"endColumn":8,"suggestions":"175"},{"ruleId":"136","severity":1,"message":"149","line":14,"column":5,"nodeType":"138","messageId":"139","endLine":14,"endColumn":18},{"ruleId":"136","severity":1,"message":"150","line":15,"column":5,"nodeType":"138","messageId":"139","endLine":15,"endColumn":8},{"ruleId":"141","severity":1,"message":"142","line":21,"column":9,"nodeType":"143","endLine":21,"endColumn":62},{"ruleId":"144","severity":1,"message":"145","line":40,"column":13,"nodeType":"146","endLine":46,"endColumn":4},{"ruleId":"136","severity":1,"message":"176","line":45,"column":5,"nodeType":"138","messageId":"139","endLine":45,"endColumn":13},{"ruleId":"144","severity":1,"message":"177","line":46,"column":6,"nodeType":"174","endLine":46,"endColumn":8,"suggestions":"178"},{"ruleId":"136","severity":1,"message":"179","line":50,"column":9,"nodeType":"138","messageId":"139","endLine":50,"endColumn":15},{"ruleId":"136","severity":1,"message":"180","line":36,"column":21,"nodeType":"138","messageId":"139","endLine":36,"endColumn":30},{"ruleId":"136","severity":1,"message":"181","line":37,"column":21,"nodeType":"138","messageId":"139","endLine":37,"endColumn":33},{"ruleId":"136","severity":1,"message":"182","line":38,"column":21,"nodeType":"138","messageId":"139","endLine":38,"endColumn":26},{"ruleId":"136","severity":1,"message":"183","line":39,"column":21,"nodeType":"138","messageId":"139","endLine":39,"endColumn":31},{"ruleId":"141","severity":1,"message":"142","line":148,"column":15,"nodeType":"143","endLine":152,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":155,"column":17,"nodeType":"143","endLine":159,"endColumn":18},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'setFinish' is assigned a value but never used.","Identifier","unusedVar","'setSigned' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'name' is assigned a value but never used.","'photoUrl' is assigned a value but never used.","'emailVerified' is assigned a value but never used.","'uid' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["184"],["185"],"'setSkilled' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'setDataFire' is assigned a value but never used.",["184"],["185"],"Assignments to the 'name' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'email' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'photoUrl' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'emailVerified' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'uid' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","'appliedData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'appliedData' and 'getMyAppliedProject'. Either include them or remove the dependency array.","ArrayExpression",["186"],"'dataFire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFirestoreData'. Either include it or remove the dependency array.",["187"],"'result' is assigned a value but never used.","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'credential' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [appliedData, getMyAppliedProject]",{"range":"192","text":"193"},"Update the dependencies array to be: [getFirestoreData]",{"range":"194","text":"195"},[1076,1078],"[appliedData, getMyAppliedProject]",[1240,1242],"[getFirestoreData]"]